-- 지점별 승인된 대출의 총 금액을 계산한 뒤 
--해당 금액이 전체 지점에서 승인된 대출 금액의 평균보다 낮은 지점의 지점명과 
--승인된 대출의 총 금액, 전체 지점에서 승인된 대출 금액의 평균을 출력하세요.

SELECT DISTINCT((SELECT NAME FROM BRANCHES WHERE BRANCH_ID = L.BRANCH_ID) BRANCH_NAME, L.*)
FROM (SELECT BRANCH_ID, SUM(AMOUNT) OVER (PARTITION BY BRANCH_ID) TOTAL_AMOUNT, (SELECT AVG(AMOUNT) FROM LOANS) AVG_AMOUNT
        FROM LOANS
        WHERE STATUS='APPROVED') L
WHERE TOTAL_AMOUNT < AVG_AMOUNT;


SELECT *
FROM EMPLOYEES;

-- 모든 직원의 사번 이름을 출력하되, 각 직원의 상사 이름과 상사가 속한 부서 이름도 함께 출력하세요. 
--상사가 없는 직원은 "NO MANAGER"로 표시하고, 상사가 속한 부서가 없을 경우 "NO DEPARTMENT"로 표시하세요
SELECT NAME, EMPLOYEE_ID, NVL((SELECT NAME FROM EMPLOYEES WHERE E.MANAGER_ID=EMPLOYEE_ID), 'NO MANAGER') MANAGER_NAME, 
        NVL((SELECT NAME FROM BRANCHES B WHERE (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = E.MANAGER_ID) = B.BRANCH_ID), 'NO DEPARTMENT') MANAGER_DEPT
FROM EMPLOYEES E;



-- 각 직원 급여 , 전체에서 차지하는 비율
SELECT EMPLOYEE_ID, NAME, SALARY, ROUND((SALARY/(SELECT SUM(SALARY) FROM EMPLOYEES E)*100),2) RATE
FROM EMPLOYEES
WHERE SALARY IS NOT NULL
ORDER BY RATE DESC;

SELECT EMPLOYEE_ID, NAME, SALARY, ROUND((SALARY/(SUM(SALARY) OVER())*100),2) RATE
FROM EMPLOYEES
WHERE SALARY IS NOT NULL
ORDER BY RATE DESC;

-- 각 계좌 최고거래 금액 높은 순 상위 5위
SELECT *
FROM(
        SELECT DISTINCT ACCOUNT_ID, MAX(T.AMOUNT), DENSE_RANK() OVER (ORDER BY MAX(T.AMOUNT) DESC) RANK
        FROM TRANSACTIONS T
        GROUP BY ACCOUNT_ID
    )
WHERE RANK <= 5;

-- 각 부서 민맥스 빼기
SELECT DEPARTMENT_ID, MAX(SALARY)-MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID;
;

-- 각 직원이 속한 부서별 평균 급여와 자신의 급여를 비교하여 급여의 차이를 계산하여 출력하세요.
-- 자신의 급여가 높으면 양수, 낮으면 음수로 표현합니다.
-- 출력 칼럼은 사번, 이름, 급여, 부서 평균 급여, 급여 차이이며 부서 평균 급여와 급여 차는 반올림하여 정수로 출력해주세요.
SELECT EMPLOYEE_ID, NAME, SALARY, DEPT_AVG, SALARY-DEPT_AVG
FROM EMPLOYEES E, (SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)) DEPT_AVG FROM EMPLOYEES GROUP BY DEPARTMENT_ID) D;
WHERE E.DEPARTMENT_ID, = D.DEPARTMENT_ID
GROUP BY DEPARTMENT_ID;


SELECT EMPLOYEE_ID, NAME, SALARY, DEPT_AVG, SALARY-DEPT_AVG
FROM EMPLOYEES E, (SELECT DEPARTMENT_ID, ROUND(AVG(SALARY) OVER (PARTITION BY DEPARTMENT_ID)) DEPT_AVG FROM EMPLOYEES) D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
;

-- 이름이 'Employee 24'인 사원의 모든 상사들을 출력하세요 
-- Employee 24>Employee 10 ... 형식이며 한줄로 나타냅니다
SELECT MAX(LTRIM(SYS_CONNECT_BY_PATH(NAME, '>'), '>')) AS PATH
FROM EMPLOYEES
START WITH NAME='Employee 24'
CONNECT BY EMPLOYEE_ID = PRIOR MANAGER_ID
;


-- 사원 테이블 급여 높은 10명의 사원 정보를 출력하세요. 급여가 동일한 경우 사원 이름 순으로 정렬하여 순위를 부여하세요.
SELECT *
FROM(
    SELECT NAME, SALARY
    FROM EMPLOYEES
    ORDER BY SALARY, NAME
    )
WHERE ROWNUM <=10;


SELECT *
FROM(
    SELECT NAME, SALARY, ROW_NUMBER() OVER (ORDER BY SALARY, NAME) RN
    FROM EMPLOYEES
    )
WHERE RN <=10;

-- 입사 년도별 급여합계 출력
SELECT NVL(TO_CHAR(HIRE_DATE, 'YYYY'), 'ALL YEARS'), SUM(SALARY)
FROM EMPLOYEES
GROUP BY ROLLUP(TO_CHAR(HIRE_DATE, 'YYYY'));

-- 부서별 급여 합계, 직무별 급여 합계, 그리고 전체 급여 합계를 출력하세요. 
-- 부서정보가 NULL인 행은 제외하고 부서별, 직무별로 정렬하며 출력은 부서명, 직무ID, 급여합계입니다.
SELECT (SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID=E.DEPARTMENT_ID), JOB_ID, SUM(SALARY)
FROM EMPLOYEES E
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY GROUPING SETS(DEPARTMENT_ID, JOB_ID,())
ORDER BY DEPARTMENT_ID, JOB_ID;

SELECT D.DEPARTMENT_NAME, E.JOB_ID, SUM(E.SALARY)
FROM EMPLOYEES E, DEPARTMENTS D
WHERE D.DEPARTMENT_ID=E.DEPARTMENT_ID
GROUP BY GROUPING SETS(D.DEPARTMENT_NAME, E.JOB_ID,())
ORDER BY D.DEPARTMENT_NAME, JOB_ID;

-- 각 직원의 급여와 해당 직원의 부서에서 그 직원의 급여보다 100 적은 급여부터 100 큰 급여까지 해당하는 급여의 합계를 계산하여 출력하세요.
-- 출력 컬럼은 부서 ID, 사원 이름, 급여, 계산한 급여 합계입니다.

SELECT DEPARTMENT_ID, NAME, SALARY,
			SUM(SALARY) OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY 
												RANGE BETWEEN 100 PRECEDING AND 100 FOLLOWING) AS SALARY_SUM
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID;

-- 각 직무별 평균 급여와 각 직원의 급여를 비교하여 "직무 평균 이상" 또는 "직무 평균 이하" 여부를 표시합니다. 
-- 그리고 전체 평균 급여와의 비교 결과도 "전체 평균 이상" 또는 "전체 평균 이하"로 함께 표시합니다.
-- (출력 컬럼은 사번, 급여, 직무 평균 급여 비교, 전체 평균 비교입니다.)
SELECT EMPLOYEE_ID, SALARY, 
        CASE WHEN SALARY >= JOB_AVG THEN '직무 평균 이상' ELSE '직무 평균 이하' END 직무_평균_급여_비교, 
        CASE WHEN SALARY >= AVG_SAL THEN '전체 평균 이상' ELSE '전체 평균 이하' END 전체_평균_급여_비교
FROM(
    SELECT EMPLOYEE_ID, SALARY, AVG(SALARY) OVER (PARTITION BY JOB_ID) JOB_AVG, AVG(SALARY) OVER () AVG_SAL
    FROM EMPLOYEES
    )
;


